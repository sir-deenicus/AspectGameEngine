// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace AspectGameEngine.FBS
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct TileMapFBS : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static TileMapFBS GetRootAsTileMapFBS(ByteBuffer _bb) { return GetRootAsTileMapFBS(_bb, new TileMapFBS()); }
  public static TileMapFBS GetRootAsTileMapFBS(ByteBuffer _bb, TileMapFBS obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public static bool VerifyTileMapFBS(ByteBuffer _bb) {Google.FlatBuffers.Verifier verifier = new Google.FlatBuffers.Verifier(_bb); return verifier.VerifyBuffer("", false, TileMapFBSVerify.Verify); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public TileMapFBS __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Width { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Height { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public AspectGameEngine.FBS.TileFBS? Tiles(int j) { int o = __p.__offset(8); return o != 0 ? (AspectGameEngine.FBS.TileFBS?)(new AspectGameEngine.FBS.TileFBS()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int TilesLength { get { int o = __p.__offset(8); return o != 0 ? __p.__vector_len(o) : 0; } }
  public AspectGameEngine.FBS.LayerCellFBS? LayerCells(int j) { int o = __p.__offset(10); return o != 0 ? (AspectGameEngine.FBS.LayerCellFBS?)(new AspectGameEngine.FBS.LayerCellFBS()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int LayerCellsLength { get { int o = __p.__offset(10); return o != 0 ? __p.__vector_len(o) : 0; } }
  public AspectGameEngine.FBS.SpriteLocFBS? VoidSpriteLoc { get { int o = __p.__offset(12); return o != 0 ? (AspectGameEngine.FBS.SpriteLocFBS?)(new AspectGameEngine.FBS.SpriteLocFBS()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public string MapName { get { int o = __p.__offset(14); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetMapNameBytes() { return __p.__vector_as_span<byte>(14, 1); }
#else
  public ArraySegment<byte>? GetMapNameBytes() { return __p.__vector_as_arraysegment(14); }
#endif
  public byte[] GetMapNameArray() { return __p.__vector_as_array<byte>(14); }
  public AspectGameEngine.FBS.MapTypeFBS MapType { get { int o = __p.__offset(16); return o != 0 ? (AspectGameEngine.FBS.MapTypeFBS)__p.bb.GetSbyte(o + __p.bb_pos) : AspectGameEngine.FBS.MapTypeFBS.Room; } }
  public string TilesetName { get { int o = __p.__offset(18); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTilesetNameBytes() { return __p.__vector_as_span<byte>(18, 1); }
#else
  public ArraySegment<byte>? GetTilesetNameBytes() { return __p.__vector_as_arraysegment(18); }
#endif
  public byte[] GetTilesetNameArray() { return __p.__vector_as_array<byte>(18); }

  public static Offset<AspectGameEngine.FBS.TileMapFBS> CreateTileMapFBS(FlatBufferBuilder builder,
      int width = 0,
      int height = 0,
      VectorOffset tilesOffset = default(VectorOffset),
      VectorOffset layer_cellsOffset = default(VectorOffset),
      Offset<AspectGameEngine.FBS.SpriteLocFBS> void_sprite_locOffset = default(Offset<AspectGameEngine.FBS.SpriteLocFBS>),
      StringOffset map_nameOffset = default(StringOffset),
      AspectGameEngine.FBS.MapTypeFBS map_type = AspectGameEngine.FBS.MapTypeFBS.Room,
      StringOffset tileset_nameOffset = default(StringOffset)) {
    builder.StartTable(8);
    TileMapFBS.AddTilesetName(builder, tileset_nameOffset);
    TileMapFBS.AddMapName(builder, map_nameOffset);
    TileMapFBS.AddVoidSpriteLoc(builder, void_sprite_locOffset);
    TileMapFBS.AddLayerCells(builder, layer_cellsOffset);
    TileMapFBS.AddTiles(builder, tilesOffset);
    TileMapFBS.AddHeight(builder, height);
    TileMapFBS.AddWidth(builder, width);
    TileMapFBS.AddMapType(builder, map_type);
    return TileMapFBS.EndTileMapFBS(builder);
  }

  public static void StartTileMapFBS(FlatBufferBuilder builder) { builder.StartTable(8); }
  public static void AddWidth(FlatBufferBuilder builder, int width) { builder.AddInt(0, width, 0); }
  public static void AddHeight(FlatBufferBuilder builder, int height) { builder.AddInt(1, height, 0); }
  public static void AddTiles(FlatBufferBuilder builder, VectorOffset tilesOffset) { builder.AddOffset(2, tilesOffset.Value, 0); }
  public static VectorOffset CreateTilesVector(FlatBufferBuilder builder, Offset<AspectGameEngine.FBS.TileFBS>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateTilesVectorBlock(FlatBufferBuilder builder, Offset<AspectGameEngine.FBS.TileFBS>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateTilesVectorBlock(FlatBufferBuilder builder, ArraySegment<Offset<AspectGameEngine.FBS.TileFBS>> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateTilesVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<Offset<AspectGameEngine.FBS.TileFBS>>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartTilesVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddLayerCells(FlatBufferBuilder builder, VectorOffset layerCellsOffset) { builder.AddOffset(3, layerCellsOffset.Value, 0); }
  public static VectorOffset CreateLayerCellsVector(FlatBufferBuilder builder, Offset<AspectGameEngine.FBS.LayerCellFBS>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateLayerCellsVectorBlock(FlatBufferBuilder builder, Offset<AspectGameEngine.FBS.LayerCellFBS>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateLayerCellsVectorBlock(FlatBufferBuilder builder, ArraySegment<Offset<AspectGameEngine.FBS.LayerCellFBS>> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateLayerCellsVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<Offset<AspectGameEngine.FBS.LayerCellFBS>>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartLayerCellsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddVoidSpriteLoc(FlatBufferBuilder builder, Offset<AspectGameEngine.FBS.SpriteLocFBS> voidSpriteLocOffset) { builder.AddOffset(4, voidSpriteLocOffset.Value, 0); }
  public static void AddMapName(FlatBufferBuilder builder, StringOffset mapNameOffset) { builder.AddOffset(5, mapNameOffset.Value, 0); }
  public static void AddMapType(FlatBufferBuilder builder, AspectGameEngine.FBS.MapTypeFBS mapType) { builder.AddSbyte(6, (sbyte)mapType, 0); }
  public static void AddTilesetName(FlatBufferBuilder builder, StringOffset tilesetNameOffset) { builder.AddOffset(7, tilesetNameOffset.Value, 0); }
  public static Offset<AspectGameEngine.FBS.TileMapFBS> EndTileMapFBS(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    builder.Required(o, 8);  // tiles
    builder.Required(o, 10);  // layer_cells
    builder.Required(o, 12);  // void_sprite_loc
    builder.Required(o, 14);  // map_name
    builder.Required(o, 18);  // tileset_name
    return new Offset<AspectGameEngine.FBS.TileMapFBS>(o);
  }
  public static void FinishTileMapFBSBuffer(FlatBufferBuilder builder, Offset<AspectGameEngine.FBS.TileMapFBS> offset) { builder.Finish(offset.Value); }
  public static void FinishSizePrefixedTileMapFBSBuffer(FlatBufferBuilder builder, Offset<AspectGameEngine.FBS.TileMapFBS> offset) { builder.FinishSizePrefixed(offset.Value); }
}


static public class TileMapFBSVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Width*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 6 /*Height*/, 4 /*int*/, 4, false)
      && verifier.VerifyVectorOfTables(tablePos, 8 /*Tiles*/, AspectGameEngine.FBS.TileFBSVerify.Verify, true)
      && verifier.VerifyVectorOfTables(tablePos, 10 /*LayerCells*/, AspectGameEngine.FBS.LayerCellFBSVerify.Verify, true)
      && verifier.VerifyTable(tablePos, 12 /*VoidSpriteLoc*/, AspectGameEngine.FBS.SpriteLocFBSVerify.Verify, true)
      && verifier.VerifyString(tablePos, 14 /*MapName*/, true)
      && verifier.VerifyField(tablePos, 16 /*MapType*/, 1 /*AspectGameEngine.FBS.MapTypeFBS*/, 1, false)
      && verifier.VerifyString(tablePos, 18 /*TilesetName*/, true)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
