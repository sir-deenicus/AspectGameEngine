// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace AspectGameEngine.FBS
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct SpriteLocFBS : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static SpriteLocFBS GetRootAsSpriteLocFBS(ByteBuffer _bb) { return GetRootAsSpriteLocFBS(_bb, new SpriteLocFBS()); }
  public static SpriteLocFBS GetRootAsSpriteLocFBS(ByteBuffer _bb, SpriteLocFBS obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public SpriteLocFBS __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int AtlasIndex { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public bool MutateAtlasIndex(int atlas_index) { int o = __p.__offset(4); if (o != 0) { __p.bb.PutInt(o + __p.bb_pos, atlas_index); return true; } else { return false; } }
  public int Row { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public bool MutateRow(int row) { int o = __p.__offset(6); if (o != 0) { __p.bb.PutInt(o + __p.bb_pos, row); return true; } else { return false; } }
  public int Column { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public bool MutateColumn(int column) { int o = __p.__offset(8); if (o != 0) { __p.bb.PutInt(o + __p.bb_pos, column); return true; } else { return false; } }

  public static Offset<AspectGameEngine.FBS.SpriteLocFBS> CreateSpriteLocFBS(FlatBufferBuilder builder,
      int atlas_index = 0,
      int row = 0,
      int column = 0) {
    builder.StartTable(3);
    SpriteLocFBS.AddColumn(builder, column);
    SpriteLocFBS.AddRow(builder, row);
    SpriteLocFBS.AddAtlasIndex(builder, atlas_index);
    return SpriteLocFBS.EndSpriteLocFBS(builder);
  }

  public static void StartSpriteLocFBS(FlatBufferBuilder builder) { builder.StartTable(3); }
  public static void AddAtlasIndex(FlatBufferBuilder builder, int atlasIndex) { builder.AddInt(0, atlasIndex, 0); }
  public static void AddRow(FlatBufferBuilder builder, int row) { builder.AddInt(1, row, 0); }
  public static void AddColumn(FlatBufferBuilder builder, int column) { builder.AddInt(2, column, 0); }
  public static Offset<AspectGameEngine.FBS.SpriteLocFBS> EndSpriteLocFBS(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<AspectGameEngine.FBS.SpriteLocFBS>(o);
  }
}


static public class SpriteLocFBSVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*AtlasIndex*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 6 /*Row*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 8 /*Column*/, 4 /*int*/, 4, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
