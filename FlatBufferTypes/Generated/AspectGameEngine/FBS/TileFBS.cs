// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace AspectGameEngine.FBS
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct TileFBS : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static TileFBS GetRootAsTileFBS(ByteBuffer _bb) { return GetRootAsTileFBS(_bb, new TileFBS()); }
  public static TileFBS GetRootAsTileFBS(ByteBuffer _bb, TileFBS obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public TileFBS __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public AspectGameEngine.FBS.SpriteLocFBS? SpriteLoc { get { int o = __p.__offset(4); return o != 0 ? (AspectGameEngine.FBS.SpriteLocFBS?)(new AspectGameEngine.FBS.SpriteLocFBS()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public int Health { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public bool IsOccupied { get { int o = __p.__offset(8); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }

  public static Offset<AspectGameEngine.FBS.TileFBS> CreateTileFBS(FlatBufferBuilder builder,
      Offset<AspectGameEngine.FBS.SpriteLocFBS> sprite_locOffset = default(Offset<AspectGameEngine.FBS.SpriteLocFBS>),
      int health = 0,
      bool is_occupied = false) {
    builder.StartTable(3);
    TileFBS.AddHealth(builder, health);
    TileFBS.AddSpriteLoc(builder, sprite_locOffset);
    TileFBS.AddIsOccupied(builder, is_occupied);
    return TileFBS.EndTileFBS(builder);
  }

  public static void StartTileFBS(FlatBufferBuilder builder) { builder.StartTable(3); }
  public static void AddSpriteLoc(FlatBufferBuilder builder, Offset<AspectGameEngine.FBS.SpriteLocFBS> spriteLocOffset) { builder.AddOffset(0, spriteLocOffset.Value, 0); }
  public static void AddHealth(FlatBufferBuilder builder, int health) { builder.AddInt(1, health, 0); }
  public static void AddIsOccupied(FlatBufferBuilder builder, bool isOccupied) { builder.AddBool(2, isOccupied, false); }
  public static Offset<AspectGameEngine.FBS.TileFBS> EndTileFBS(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    builder.Required(o, 4);  // sprite_loc
    return new Offset<AspectGameEngine.FBS.TileFBS>(o);
  }
}


static public class TileFBSVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyTable(tablePos, 4 /*SpriteLoc*/, AspectGameEngine.FBS.SpriteLocFBSVerify.Verify, true)
      && verifier.VerifyField(tablePos, 6 /*Health*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 8 /*IsOccupied*/, 1 /*bool*/, 1, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
