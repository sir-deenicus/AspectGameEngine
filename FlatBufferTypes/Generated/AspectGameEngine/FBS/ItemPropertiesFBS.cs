// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace AspectGameEngine.FBS
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct ItemPropertiesFBS : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static ItemPropertiesFBS GetRootAsItemPropertiesFBS(ByteBuffer _bb) { return GetRootAsItemPropertiesFBS(_bb, new ItemPropertiesFBS()); }
  public static ItemPropertiesFBS GetRootAsItemPropertiesFBS(ByteBuffer _bb, ItemPropertiesFBS obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public ItemPropertiesFBS __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public AspectGameEngine.FBS.SpriteRefFBS SpriteType { get { int o = __p.__offset(4); return o != 0 ? (AspectGameEngine.FBS.SpriteRefFBS)__p.bb.Get(o + __p.bb_pos) : AspectGameEngine.FBS.SpriteRefFBS.NONE; } }
  public TTable? Sprite<TTable>() where TTable : struct, IFlatbufferObject { int o = __p.__offset(6); return o != 0 ? (TTable?)__p.__union<TTable>(o + __p.bb_pos) : null; }
  public AspectGameEngine.FBS.SpriteSheetRegionFBS SpriteAsSpriteSheetRegionFBS() { return Sprite<AspectGameEngine.FBS.SpriteSheetRegionFBS>().Value; }
  public AspectGameEngine.FBS.SpriteSheetCellFBS SpriteAsSpriteSheetCellFBS() { return Sprite<AspectGameEngine.FBS.SpriteSheetCellFBS>().Value; }
  public AspectGameEngine.FBS.TextureIdFBS SpriteAsTextureIdFBS() { return Sprite<AspectGameEngine.FBS.TextureIdFBS>().Value; }
  public AspectGameEngine.FBS.SceneRefFBS SpriteAsSceneRefFBS() { return Sprite<AspectGameEngine.FBS.SceneRefFBS>().Value; }
  public AspectGameEngine.FBS.TileOpacityFBS TileOpacity { get { int o = __p.__offset(8); return o != 0 ? (AspectGameEngine.FBS.TileOpacityFBS)__p.bb.GetSbyte(o + __p.bb_pos) : AspectGameEngine.FBS.TileOpacityFBS.Opaque; } }

  public static Offset<AspectGameEngine.FBS.ItemPropertiesFBS> CreateItemPropertiesFBS(FlatBufferBuilder builder,
      AspectGameEngine.FBS.SpriteRefFBS sprite_type = AspectGameEngine.FBS.SpriteRefFBS.NONE,
      int spriteOffset = 0,
      AspectGameEngine.FBS.TileOpacityFBS tile_opacity = AspectGameEngine.FBS.TileOpacityFBS.Opaque) {
    builder.StartTable(3);
    ItemPropertiesFBS.AddSprite(builder, spriteOffset);
    ItemPropertiesFBS.AddTileOpacity(builder, tile_opacity);
    ItemPropertiesFBS.AddSpriteType(builder, sprite_type);
    return ItemPropertiesFBS.EndItemPropertiesFBS(builder);
  }

  public static void StartItemPropertiesFBS(FlatBufferBuilder builder) { builder.StartTable(3); }
  public static void AddSpriteType(FlatBufferBuilder builder, AspectGameEngine.FBS.SpriteRefFBS spriteType) { builder.AddByte(0, (byte)spriteType, 0); }
  public static void AddSprite(FlatBufferBuilder builder, int spriteOffset) { builder.AddOffset(1, spriteOffset, 0); }
  public static void AddTileOpacity(FlatBufferBuilder builder, AspectGameEngine.FBS.TileOpacityFBS tileOpacity) { builder.AddSbyte(2, (sbyte)tileOpacity, 0); }
  public static Offset<AspectGameEngine.FBS.ItemPropertiesFBS> EndItemPropertiesFBS(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<AspectGameEngine.FBS.ItemPropertiesFBS>(o);
  }
}


static public class ItemPropertiesFBSVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*SpriteType*/, 1 /*AspectGameEngine.FBS.SpriteRefFBS*/, 1, false)
      && verifier.VerifyUnion(tablePos, 4, 6 /*Sprite*/, AspectGameEngine.FBS.SpriteRefFBSVerify.Verify, false)
      && verifier.VerifyField(tablePos, 8 /*TileOpacity*/, 1 /*AspectGameEngine.FBS.TileOpacityFBS*/, 1, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
