// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace AspectGameEngine.FBS
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct EntityRegistryFBS : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static EntityRegistryFBS GetRootAsEntityRegistryFBS(ByteBuffer _bb) { return GetRootAsEntityRegistryFBS(_bb, new EntityRegistryFBS()); }
  public static EntityRegistryFBS GetRootAsEntityRegistryFBS(ByteBuffer _bb, EntityRegistryFBS obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public static bool VerifyEntityRegistryFBS(ByteBuffer _bb) {Google.FlatBuffers.Verifier verifier = new Google.FlatBuffers.Verifier(_bb); return verifier.VerifyBuffer("", false, EntityRegistryFBSVerify.Verify); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public EntityRegistryFBS __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public AspectGameEngine.FBS.ItemPropsEntryFBS? Items(int j) { int o = __p.__offset(4); return o != 0 ? (AspectGameEngine.FBS.ItemPropsEntryFBS?)(new AspectGameEngine.FBS.ItemPropsEntryFBS()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int ItemsLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }
  public AspectGameEngine.FBS.FixturePropsEntryFBS? Fixtures(int j) { int o = __p.__offset(6); return o != 0 ? (AspectGameEngine.FBS.FixturePropsEntryFBS?)(new AspectGameEngine.FBS.FixturePropsEntryFBS()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int FixturesLength { get { int o = __p.__offset(6); return o != 0 ? __p.__vector_len(o) : 0; } }
  public AspectGameEngine.FBS.ActorPropsEntryFBS? Actors(int j) { int o = __p.__offset(8); return o != 0 ? (AspectGameEngine.FBS.ActorPropsEntryFBS?)(new AspectGameEngine.FBS.ActorPropsEntryFBS()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int ActorsLength { get { int o = __p.__offset(8); return o != 0 ? __p.__vector_len(o) : 0; } }
  public AspectGameEngine.FBS.DecalPropsEntryFBS? Decals(int j) { int o = __p.__offset(10); return o != 0 ? (AspectGameEngine.FBS.DecalPropsEntryFBS?)(new AspectGameEngine.FBS.DecalPropsEntryFBS()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int DecalsLength { get { int o = __p.__offset(10); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<AspectGameEngine.FBS.EntityRegistryFBS> CreateEntityRegistryFBS(FlatBufferBuilder builder,
      VectorOffset itemsOffset = default(VectorOffset),
      VectorOffset fixturesOffset = default(VectorOffset),
      VectorOffset actorsOffset = default(VectorOffset),
      VectorOffset decalsOffset = default(VectorOffset)) {
    builder.StartTable(4);
    EntityRegistryFBS.AddDecals(builder, decalsOffset);
    EntityRegistryFBS.AddActors(builder, actorsOffset);
    EntityRegistryFBS.AddFixtures(builder, fixturesOffset);
    EntityRegistryFBS.AddItems(builder, itemsOffset);
    return EntityRegistryFBS.EndEntityRegistryFBS(builder);
  }

  public static void StartEntityRegistryFBS(FlatBufferBuilder builder) { builder.StartTable(4); }
  public static void AddItems(FlatBufferBuilder builder, VectorOffset itemsOffset) { builder.AddOffset(0, itemsOffset.Value, 0); }
  public static VectorOffset CreateItemsVector(FlatBufferBuilder builder, Offset<AspectGameEngine.FBS.ItemPropsEntryFBS>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateItemsVectorBlock(FlatBufferBuilder builder, Offset<AspectGameEngine.FBS.ItemPropsEntryFBS>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateItemsVectorBlock(FlatBufferBuilder builder, ArraySegment<Offset<AspectGameEngine.FBS.ItemPropsEntryFBS>> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateItemsVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<Offset<AspectGameEngine.FBS.ItemPropsEntryFBS>>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartItemsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddFixtures(FlatBufferBuilder builder, VectorOffset fixturesOffset) { builder.AddOffset(1, fixturesOffset.Value, 0); }
  public static VectorOffset CreateFixturesVector(FlatBufferBuilder builder, Offset<AspectGameEngine.FBS.FixturePropsEntryFBS>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateFixturesVectorBlock(FlatBufferBuilder builder, Offset<AspectGameEngine.FBS.FixturePropsEntryFBS>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateFixturesVectorBlock(FlatBufferBuilder builder, ArraySegment<Offset<AspectGameEngine.FBS.FixturePropsEntryFBS>> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateFixturesVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<Offset<AspectGameEngine.FBS.FixturePropsEntryFBS>>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartFixturesVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddActors(FlatBufferBuilder builder, VectorOffset actorsOffset) { builder.AddOffset(2, actorsOffset.Value, 0); }
  public static VectorOffset CreateActorsVector(FlatBufferBuilder builder, Offset<AspectGameEngine.FBS.ActorPropsEntryFBS>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateActorsVectorBlock(FlatBufferBuilder builder, Offset<AspectGameEngine.FBS.ActorPropsEntryFBS>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateActorsVectorBlock(FlatBufferBuilder builder, ArraySegment<Offset<AspectGameEngine.FBS.ActorPropsEntryFBS>> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateActorsVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<Offset<AspectGameEngine.FBS.ActorPropsEntryFBS>>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartActorsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddDecals(FlatBufferBuilder builder, VectorOffset decalsOffset) { builder.AddOffset(3, decalsOffset.Value, 0); }
  public static VectorOffset CreateDecalsVector(FlatBufferBuilder builder, Offset<AspectGameEngine.FBS.DecalPropsEntryFBS>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateDecalsVectorBlock(FlatBufferBuilder builder, Offset<AspectGameEngine.FBS.DecalPropsEntryFBS>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateDecalsVectorBlock(FlatBufferBuilder builder, ArraySegment<Offset<AspectGameEngine.FBS.DecalPropsEntryFBS>> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateDecalsVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<Offset<AspectGameEngine.FBS.DecalPropsEntryFBS>>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartDecalsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<AspectGameEngine.FBS.EntityRegistryFBS> EndEntityRegistryFBS(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<AspectGameEngine.FBS.EntityRegistryFBS>(o);
  }
  public static void FinishEntityRegistryFBSBuffer(FlatBufferBuilder builder, Offset<AspectGameEngine.FBS.EntityRegistryFBS> offset) { builder.Finish(offset.Value); }
  public static void FinishSizePrefixedEntityRegistryFBSBuffer(FlatBufferBuilder builder, Offset<AspectGameEngine.FBS.EntityRegistryFBS> offset) { builder.FinishSizePrefixed(offset.Value); }
}


static public class EntityRegistryFBSVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyVectorOfTables(tablePos, 4 /*Items*/, AspectGameEngine.FBS.ItemPropsEntryFBSVerify.Verify, false)
      && verifier.VerifyVectorOfTables(tablePos, 6 /*Fixtures*/, AspectGameEngine.FBS.FixturePropsEntryFBSVerify.Verify, false)
      && verifier.VerifyVectorOfTables(tablePos, 8 /*Actors*/, AspectGameEngine.FBS.ActorPropsEntryFBSVerify.Verify, false)
      && verifier.VerifyVectorOfTables(tablePos, 10 /*Decals*/, AspectGameEngine.FBS.DecalPropsEntryFBSVerify.Verify, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
