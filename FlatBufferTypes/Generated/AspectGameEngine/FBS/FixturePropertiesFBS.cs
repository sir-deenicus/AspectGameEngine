// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace AspectGameEngine.FBS
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct FixturePropertiesFBS : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static FixturePropertiesFBS GetRootAsFixturePropertiesFBS(ByteBuffer _bb) { return GetRootAsFixturePropertiesFBS(_bb, new FixturePropertiesFBS()); }
  public static FixturePropertiesFBS GetRootAsFixturePropertiesFBS(ByteBuffer _bb, FixturePropertiesFBS obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public FixturePropertiesFBS __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public AspectGameEngine.FBS.SpriteRefFBS SpriteType { get { int o = __p.__offset(4); return o != 0 ? (AspectGameEngine.FBS.SpriteRefFBS)__p.bb.Get(o + __p.bb_pos) : AspectGameEngine.FBS.SpriteRefFBS.NONE; } }
  public TTable? Sprite<TTable>() where TTable : struct, IFlatbufferObject { int o = __p.__offset(6); return o != 0 ? (TTable?)__p.__union<TTable>(o + __p.bb_pos) : null; }
  public AspectGameEngine.FBS.SpriteSheetRegionFBS SpriteAsSpriteSheetRegionFBS() { return Sprite<AspectGameEngine.FBS.SpriteSheetRegionFBS>().Value; }
  public AspectGameEngine.FBS.SpriteSheetCellFBS SpriteAsSpriteSheetCellFBS() { return Sprite<AspectGameEngine.FBS.SpriteSheetCellFBS>().Value; }
  public AspectGameEngine.FBS.TextureIdFBS SpriteAsTextureIdFBS() { return Sprite<AspectGameEngine.FBS.TextureIdFBS>().Value; }
  public AspectGameEngine.FBS.SceneRefFBS SpriteAsSceneRefFBS() { return Sprite<AspectGameEngine.FBS.SceneRefFBS>().Value; }
  public bool BlocksMovement { get { int o = __p.__offset(8); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public bool Interactable { get { int o = __p.__offset(10); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public AspectGameEngine.FBS.TileOpacityFBS TileOpacity { get { int o = __p.__offset(12); return o != 0 ? (AspectGameEngine.FBS.TileOpacityFBS)__p.bb.GetSbyte(o + __p.bb_pos) : AspectGameEngine.FBS.TileOpacityFBS.Opaque; } }

  public static Offset<AspectGameEngine.FBS.FixturePropertiesFBS> CreateFixturePropertiesFBS(FlatBufferBuilder builder,
      AspectGameEngine.FBS.SpriteRefFBS sprite_type = AspectGameEngine.FBS.SpriteRefFBS.NONE,
      int spriteOffset = 0,
      bool blocks_movement = false,
      bool interactable = false,
      AspectGameEngine.FBS.TileOpacityFBS tile_opacity = AspectGameEngine.FBS.TileOpacityFBS.Opaque) {
    builder.StartTable(5);
    FixturePropertiesFBS.AddSprite(builder, spriteOffset);
    FixturePropertiesFBS.AddTileOpacity(builder, tile_opacity);
    FixturePropertiesFBS.AddInteractable(builder, interactable);
    FixturePropertiesFBS.AddBlocksMovement(builder, blocks_movement);
    FixturePropertiesFBS.AddSpriteType(builder, sprite_type);
    return FixturePropertiesFBS.EndFixturePropertiesFBS(builder);
  }

  public static void StartFixturePropertiesFBS(FlatBufferBuilder builder) { builder.StartTable(5); }
  public static void AddSpriteType(FlatBufferBuilder builder, AspectGameEngine.FBS.SpriteRefFBS spriteType) { builder.AddByte(0, (byte)spriteType, 0); }
  public static void AddSprite(FlatBufferBuilder builder, int spriteOffset) { builder.AddOffset(1, spriteOffset, 0); }
  public static void AddBlocksMovement(FlatBufferBuilder builder, bool blocksMovement) { builder.AddBool(2, blocksMovement, false); }
  public static void AddInteractable(FlatBufferBuilder builder, bool interactable) { builder.AddBool(3, interactable, false); }
  public static void AddTileOpacity(FlatBufferBuilder builder, AspectGameEngine.FBS.TileOpacityFBS tileOpacity) { builder.AddSbyte(4, (sbyte)tileOpacity, 0); }
  public static Offset<AspectGameEngine.FBS.FixturePropertiesFBS> EndFixturePropertiesFBS(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<AspectGameEngine.FBS.FixturePropertiesFBS>(o);
  }
}


static public class FixturePropertiesFBSVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*SpriteType*/, 1 /*AspectGameEngine.FBS.SpriteRefFBS*/, 1, false)
      && verifier.VerifyUnion(tablePos, 4, 6 /*Sprite*/, AspectGameEngine.FBS.SpriteRefFBSVerify.Verify, false)
      && verifier.VerifyField(tablePos, 8 /*BlocksMovement*/, 1 /*bool*/, 1, false)
      && verifier.VerifyField(tablePos, 10 /*Interactable*/, 1 /*bool*/, 1, false)
      && verifier.VerifyField(tablePos, 12 /*TileOpacity*/, 1 /*AspectGameEngine.FBS.TileOpacityFBS*/, 1, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
