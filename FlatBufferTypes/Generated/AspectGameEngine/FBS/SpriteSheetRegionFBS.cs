// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace AspectGameEngine.FBS
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct SpriteSheetRegionFBS : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static SpriteSheetRegionFBS GetRootAsSpriteSheetRegionFBS(ByteBuffer _bb) { return GetRootAsSpriteSheetRegionFBS(_bb, new SpriteSheetRegionFBS()); }
  public static SpriteSheetRegionFBS GetRootAsSpriteSheetRegionFBS(ByteBuffer _bb, SpriteSheetRegionFBS obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public SpriteSheetRegionFBS __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int SheetId { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int X { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Y { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Width { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Height { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }

  public static Offset<AspectGameEngine.FBS.SpriteSheetRegionFBS> CreateSpriteSheetRegionFBS(FlatBufferBuilder builder,
      int sheet_id = 0,
      int x = 0,
      int y = 0,
      int width = 0,
      int height = 0) {
    builder.StartTable(5);
    SpriteSheetRegionFBS.AddHeight(builder, height);
    SpriteSheetRegionFBS.AddWidth(builder, width);
    SpriteSheetRegionFBS.AddY(builder, y);
    SpriteSheetRegionFBS.AddX(builder, x);
    SpriteSheetRegionFBS.AddSheetId(builder, sheet_id);
    return SpriteSheetRegionFBS.EndSpriteSheetRegionFBS(builder);
  }

  public static void StartSpriteSheetRegionFBS(FlatBufferBuilder builder) { builder.StartTable(5); }
  public static void AddSheetId(FlatBufferBuilder builder, int sheetId) { builder.AddInt(0, sheetId, 0); }
  public static void AddX(FlatBufferBuilder builder, int x) { builder.AddInt(1, x, 0); }
  public static void AddY(FlatBufferBuilder builder, int y) { builder.AddInt(2, y, 0); }
  public static void AddWidth(FlatBufferBuilder builder, int width) { builder.AddInt(3, width, 0); }
  public static void AddHeight(FlatBufferBuilder builder, int height) { builder.AddInt(4, height, 0); }
  public static Offset<AspectGameEngine.FBS.SpriteSheetRegionFBS> EndSpriteSheetRegionFBS(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<AspectGameEngine.FBS.SpriteSheetRegionFBS>(o);
  }
}


static public class SpriteSheetRegionFBSVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*SheetId*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 6 /*X*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 8 /*Y*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 10 /*Width*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 12 /*Height*/, 4 /*int*/, 4, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
