// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace AspectGameEngine.FBS
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct TextureIdFBS : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static TextureIdFBS GetRootAsTextureIdFBS(ByteBuffer _bb) { return GetRootAsTextureIdFBS(_bb, new TextureIdFBS()); }
  public static TextureIdFBS GetRootAsTextureIdFBS(ByteBuffer _bb, TextureIdFBS obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public TextureIdFBS __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }

  public static Offset<AspectGameEngine.FBS.TextureIdFBS> CreateTextureIdFBS(FlatBufferBuilder builder,
      int id = 0) {
    builder.StartTable(1);
    TextureIdFBS.AddId(builder, id);
    return TextureIdFBS.EndTextureIdFBS(builder);
  }

  public static void StartTextureIdFBS(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddId(FlatBufferBuilder builder, int id) { builder.AddInt(0, id, 0); }
  public static Offset<AspectGameEngine.FBS.TextureIdFBS> EndTextureIdFBS(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<AspectGameEngine.FBS.TextureIdFBS>(o);
  }
}


static public class TextureIdFBSVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Id*/, 4 /*int*/, 4, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
