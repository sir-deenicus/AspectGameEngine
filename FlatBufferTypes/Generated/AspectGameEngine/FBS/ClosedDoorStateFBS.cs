// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace AspectGameEngine.FBS
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct ClosedDoorStateFBS : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static ClosedDoorStateFBS GetRootAsClosedDoorStateFBS(ByteBuffer _bb) { return GetRootAsClosedDoorStateFBS(_bb, new ClosedDoorStateFBS()); }
  public static ClosedDoorStateFBS GetRootAsClosedDoorStateFBS(ByteBuffer _bb, ClosedDoorStateFBS obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public ClosedDoorStateFBS __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public bool Locked { get { int o = __p.__offset(4); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }

  public static Offset<AspectGameEngine.FBS.ClosedDoorStateFBS> CreateClosedDoorStateFBS(FlatBufferBuilder builder,
      bool locked = false) {
    builder.StartTable(1);
    ClosedDoorStateFBS.AddLocked(builder, locked);
    return ClosedDoorStateFBS.EndClosedDoorStateFBS(builder);
  }

  public static void StartClosedDoorStateFBS(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddLocked(FlatBufferBuilder builder, bool locked) { builder.AddBool(0, locked, false); }
  public static Offset<AspectGameEngine.FBS.ClosedDoorStateFBS> EndClosedDoorStateFBS(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<AspectGameEngine.FBS.ClosedDoorStateFBS>(o);
  }
}


static public class ClosedDoorStateFBSVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Locked*/, 1 /*bool*/, 1, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
