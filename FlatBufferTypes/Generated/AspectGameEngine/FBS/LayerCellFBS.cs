// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace AspectGameEngine.FBS
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct LayerCellFBS : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static LayerCellFBS GetRootAsLayerCellFBS(ByteBuffer _bb) { return GetRootAsLayerCellFBS(_bb, new LayerCellFBS()); }
  public static LayerCellFBS GetRootAsLayerCellFBS(ByteBuffer _bb, LayerCellFBS obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public LayerCellFBS __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Items(int j) { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int ItemsLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetItemsBytes() { return __p.__vector_as_span<int>(4, 4); }
#else
  public ArraySegment<byte>? GetItemsBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public int[] GetItemsArray() { return __p.__vector_as_array<int>(4); }
  public int FixtureId { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)-1; } }
  public int ActorId { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)-1; } }
  public int DecalId { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)-1; } }

  public static Offset<AspectGameEngine.FBS.LayerCellFBS> CreateLayerCellFBS(FlatBufferBuilder builder,
      VectorOffset itemsOffset = default(VectorOffset),
      int fixture_id = -1,
      int actor_id = -1,
      int decal_id = -1) {
    builder.StartTable(4);
    LayerCellFBS.AddDecalId(builder, decal_id);
    LayerCellFBS.AddActorId(builder, actor_id);
    LayerCellFBS.AddFixtureId(builder, fixture_id);
    LayerCellFBS.AddItems(builder, itemsOffset);
    return LayerCellFBS.EndLayerCellFBS(builder);
  }

  public static void StartLayerCellFBS(FlatBufferBuilder builder) { builder.StartTable(4); }
  public static void AddItems(FlatBufferBuilder builder, VectorOffset itemsOffset) { builder.AddOffset(0, itemsOffset.Value, 0); }
  public static VectorOffset CreateItemsVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateItemsVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateItemsVectorBlock(FlatBufferBuilder builder, ArraySegment<int> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateItemsVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<int>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartItemsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddFixtureId(FlatBufferBuilder builder, int fixtureId) { builder.AddInt(1, fixtureId, -1); }
  public static void AddActorId(FlatBufferBuilder builder, int actorId) { builder.AddInt(2, actorId, -1); }
  public static void AddDecalId(FlatBufferBuilder builder, int decalId) { builder.AddInt(3, decalId, -1); }
  public static Offset<AspectGameEngine.FBS.LayerCellFBS> EndLayerCellFBS(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<AspectGameEngine.FBS.LayerCellFBS>(o);
  }
}


static public class LayerCellFBSVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyVectorOfData(tablePos, 4 /*Items*/, 4 /*int*/, false)
      && verifier.VerifyField(tablePos, 6 /*FixtureId*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 8 /*ActorId*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 10 /*DecalId*/, 4 /*int*/, 4, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
